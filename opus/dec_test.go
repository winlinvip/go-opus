// The MIT License (MIT)
//
// Copyright (c) 2016 winlin
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// @remark we must use another packet for utest, because the cgo will dup symbols.
package opus_test

import (
	"github.com/winlinvip/go-opus/opus"
	"testing"
)

func TestInit(t *testing.T) {
	d := opus.NewOpusDecoder()

	if err := d.Init(48000, 2); err != nil {
		t.Error("init failed, err is", err)
		return
	}
	defer d.Close()

	b := []byte{
		0xfc, 0x7d, 0x5c, 0xa5, 0x14, 0x8f, 0xe2, 0xf0, 0xe4, 0xe0, 0x7d, 0xab, 0x33, 0x78, 0x77, 0x2c,
		0xd0, 0x3c, 0xd1, 0xd0, 0xa3, 0xd5, 0xce, 0x28, 0xfd, 0xf1, 0x88, 0xbe, 0x5a, 0x68, 0xca, 0xc3,
		0x6c, 0x2c, 0xf1, 0x0b, 0xdc, 0x4e, 0x76, 0x6a, 0x72, 0xda, 0x31, 0x5c, 0x5a, 0x00, 0xd0, 0xde,
		0xf8, 0xe9, 0x6b, 0x19, 0xad, 0xf9, 0xc7, 0x92, 0x79, 0x6e, 0x9b, 0x0b, 0x4c, 0x0d, 0xf0, 0xab,
		0x35, 0x85, 0x5e, 0x46, 0xc1, 0x92, 0x67, 0x09, 0xd0, 0x0d, 0x10, 0x5c, 0xb1, 0x53, 0xfe, 0xd4,
		0x72, 0xc1, 0x8d, 0x1e, 0xc5, 0xbb, 0x19, 0x19, 0x34, 0x19, 0xa9, 0xf0, 0xee, 0xd4, 0x40, 0x59,
		0xa8, 0x9f, 0xc3, 0xc2, 0x5a, 0x47, 0xa5, 0x65, 0xb8, 0x7e, 0x1d, 0x53, 0xea, 0xd2, 0x5d, 0xc5,
		0x88, 0x90, 0xde, 0x76, 0x8a, 0xc2, 0xff, 0x2b, 0xa1, 0x2c, 0x30, 0x5a, 0x02, 0x93, 0x62, 0x66,
		0x5a, 0xf6, 0x06, 0xd3, 0xc2, 0xe0, 0xd2, 0x48, 0x84, 0x57, 0xd6, 0x17, 0xc6, 0x62, 0xfd, 0xfc,
		0x38, 0xc8, 0x2d, 0xb2, 0x60, 0x76, 0xf1, 0xe3, 0x65, 0x43, 0xc8, 0xca, 0xad, 0x65, 0xc8, 0x88,
		0xd7, 0x24, 0x26, 0x5b, 0xfa, 0x1b, 0x1d, 0xf5, 0x93, 0x97, 0xc3, 0x29, 0xc0, 0x87, 0xf3, 0xdd,
		0xda, 0xe2, 0x4c, 0x30, 0x96, 0x73, 0xc3, 0x31, 0x24, 0xad, 0x5a, 0xdc, 0xc3, 0x8c, 0xcf, 0x97,
		0x05, 0x26, 0xcc, 0xc2, 0x22, 0x93, 0xd2, 0x65, 0x0d, 0x4a, 0x45, 0x65, 0xb0, 0xcb, 0xa9, 0xaa,
		0x66, 0xa8, 0x15, 0x44, 0x2f, 0x8f, 0x1f, 0x79, 0x4c, 0x48, 0xa0, 0xa4, 0xb1, 0x2b, 0xa6, 0x27,
		0xc6, 0x19, 0x59, 0xcf, 0x96, 0x60, 0x76, 0x93, 0x79, 0x9a, 0x80, 0xea, 0x6e, 0x61, 0x10, 0xb1,
		0x2e, 0x23, 0xe0, 0xa0, 0x0a, 0xb3, 0x7b, 0x8b, 0x4d, 0x82, 0x38, 0x90, 0x33, 0xbc, 0xce, 0x9a,
		0x72, 0xa9, 0xd8, 0x5b, 0x58, 0x96, 0xea, 0x8e, 0xc7, 0x83, 0xb0, 0xb5, 0x71, 0xf0, 0x37, 0x0d,
		0x98, 0x43, 0xc1, 0x8c, 0x99, 0x61, 0xe2, 0x70, 0xd3, 0xff, 0xf2, 0xbd, 0x4a, 0x53, 0x0e, 0x66,
		0xbe, 0x67, 0xfb, 0x90, 0x42, 0x66, 0x27, 0x62, 0x87, 0x85, 0xea, 0x6e, 0x02, 0x9e, 0x48, 0xc0,
		0xb8, 0x46, 0x52, 0x9c, 0x61, 0x6f, 0xd4, 0x2a, 0x10, 0x27, 0xd6, 0x7d, 0x49,
	}
	pcm := make([]byte, 4096)
	if frameSize, err := d.Decode(b, pcm, false); err != nil {
		t.Errorf("err %+v", err)
		return
	} else if frameSize != 960 {
		t.Errorf("invalid %v", frameSize)
		return
	}

	b = []byte{
		0x78, 0xa3, 0xc4, 0x78, 0xf6, 0xc2, 0xc7, 0xd4, 0xf8, 0x44, 0x6a, 0x9c, 0x89, 0xd7, 0x50, 0x20,
		0x94, 0x5b, 0xad, 0x3a, 0x34, 0x13, 0x57, 0x33, 0xe7, 0x36, 0xde, 0x3f, 0xf4, 0x14, 0x4a, 0x40,
		0x76, 0xef, 0x31, 0xd9, 0x7f, 0x96, 0x03, 0xb3, 0xa3, 0x7c, 0x17, 0x73, 0xaf, 0x9a, 0x5f, 0xa0,
		0xbb, 0x82, 0x44, 0x3c, 0x57, 0x0e, 0x8f, 0x22, 0x80, 0x76, 0x90, 0xe5, 0x63, 0x81, 0x40, 0xa1,
		0x7b, 0x68, 0xa8, 0xda, 0x2e, 0xa4, 0x2b, 0x6e, 0x50, 0x22, 0xd4, 0xb6, 0xc8, 0xb9, 0xb6, 0x97,
		0x06, 0xe5, 0x7c, 0xc9, 0xa7, 0xfe, 0x1e, 0xd0, 0xa1, 0x5f, 0x09,
	}
	if frameSize, err := d.Decode(b, pcm, false); err != nil {
		t.Errorf("err %+v", err)
		return
	} else if frameSize != 960 {
		t.Errorf("invalid %v", frameSize)
		return
	}
}
